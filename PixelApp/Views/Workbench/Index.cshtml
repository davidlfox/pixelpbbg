
@{ 
    var defaultIngredientUrl = "//fillmurray.com/100/100";
}

<style type="text/css">
    .ingredient-slot {
        padding: 10px;
        border: 2px solid #fff;
        height: 124px;
    }

    .ingredient-slot .quantity {
        font-size: 72px;
        background-color: #aaa;
        color: #333;
    }

    .ingredient-slot img {

    }
</style>

<h2>Workbench</h2>

<form action="/workbench/craft" method="post">
    <div class="row">
        <div class="col-xs-4">
            <div class="form-group">
                <select name="ItemId" class="form-control"
                        data-bind="options: selectitems, optionsText: 'name', optionsCaption: 'Select an item', value: selected, event: { change: itemSelected }">
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <h3 data-bind="html: description"></h3>
        </div>
    </div>
    <div class="row" data-bind="foreach: ingredients">
        <div class="col-xs-12 col-sm-3">
            <div class="ingredient-slot">
                <div class="col-xs-6 quantity" data-bind="text: quantity">
                </div>
                <div class="col-xs-6">
                    <img data-bind="attr: { src: imageurl, alt: name }" />
                </div>
            </div>
        </div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-xs-4">
            <div class="alert alert-warning">
                <div class="form-group">
                    <input type="number" name="Quantity" class="quantity form-control" data-bind="value: canafford" />
                    <strong>(Max quantity) </strong>
                </div>
                <div class="form-group">
                    <input type="submit" value="Craft" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
</form>



@section scripts {
    <script src="//ajax.aspnetcdn.com/ajax/knockout/knockout-3.4.1.js"></script>

    <script type="text/javascript">

        var defaultIngredientModel = { imageurl: '@defaultIngredientUrl', name: 'None', quantity: 0 };
        var defaultIngredients = [];
        for (var i = 0; i < 4; i++) {
            defaultIngredients.push(defaultIngredientModel);
        }

        function ItemsModel() {

            var self = this;

            self.selected = ko.observable(0);
            self.description = ko.observable('&nbsp;');
            self.canafford = ko.observable(0);
            self.civpop = ko.observable(0);
            self.items = ko.observableArray([]);
            self.selectitems = ko.observableArray([]);
            self.ingredients = ko.observableArray(defaultIngredients);

            // change ingredients when selecting an item
            self.itemSelected = function () {
                var selectedItem = self.selected();
                var item = self.items().filter(function (item) { return item.ItemId == selectedItem.value; })[0];
                self.description(item.Description);
                self.canafford(item.CanAffordQuantity);
                var ingredients = item.Ingredients;
                self.ingredients.removeAll();
                for (var i = 0; i < 4; i++) {
                    if (ingredients[i]) {
                        var ing = ingredients[i];
                        self.ingredients.push({ imageurl: ing.ImageUrl, name: ing.Name, quantity: ing.Quantity });
                    } else {
                        self.ingredients.push({ imageurl: '@defaultIngredientUrl', name: 'None', quantity: 0 });
                    }
                }
            };
        };

        // item model
        var Item = function (name, value) {
            this.name = name;
            this.value = value;
        }

        $(function () {
            var model = new ItemsModel();
            ko.applyBindings(model);
            // get data
            $.ajax({
                type: 'get',
                url: '/workbench/getitems',
                success: function (data) {
                    model.civpop(data.CivilianPopulation);
                    model.items(data.Items);
                    // map items collection
                    $.each(data.Items, function (i, item) {
                        model.selectitems.push(new Item(item.Name, item.ItemId));
                    });
                }
            });
        });
    </script>
}
